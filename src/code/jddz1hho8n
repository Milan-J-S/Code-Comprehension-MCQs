{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: !=, right: {_nodetype: ID,  name: NULL}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: root}, type: ->}]},  name: {_nodetype: ID,  name: noofnodes}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: root}, type: ->}]},  name: {_nodetype: ID,  name: noofnodes}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: count}, op: p++}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: noofnodes, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: root, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: root, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}]},  type: {_nodetype: TypeDecl,  declname: noofnodes, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}