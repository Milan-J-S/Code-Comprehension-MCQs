{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: edge, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: edge, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: edge}, op: =, rvalue: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, op: sizeof}, op: *, right: {_nodetype: ID,  name: n}}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: len, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: len, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: len}, op: =, rvalue: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, op: sizeof}, op: *, right: {_nodetype: ID,  name: n}}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: minv, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: minv, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: minw, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: minw, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: len}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: edge}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: edge}, subscript: {_nodetype: ID,  name: start}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: len}, subscript: {_nodetype: ID,  name: start}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: minv}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: minw}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1000000}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: minw}, op: >, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, subscript: {_nodetype: ID,  name: j}}, op: +, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: len}, subscript: {_nodetype: ID,  name: i}}}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: !=, right: {_nodetype: ID,  name: j}}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: edge}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: edge}, subscript: {_nodetype: ID,  name: j}}, op: !=, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "true"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: minv}, op: =, rvalue: {_nodetype: ID,  name: i}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: minw}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, subscript: {_nodetype: ID,  name: j}}, op: +, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: len}, subscript: {_nodetype: ID,  name: i}}}}],    {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: edge}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ID,  name: minv}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: len}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ID,  name: minw}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: ==, right: {_nodetype: ID,  name: end}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: ID,  name: w}}}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: dijkstra, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: end, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: end, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: start, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: start, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: dijkstra, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}, param_decls: None}