{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "SELECT TYPE\\n1: Normal\\n2: Pro"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: type}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: type}, op: ==, right: {_nodetype: Constant,  type: int, value: 2}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: pro}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: name}, {_nodetype: ID,  name: p1}]},  name: {_nodetype: ID,  name: insert}}, {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: HS}}, {_nodetype: Return,  expr: None}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: func, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: func, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}