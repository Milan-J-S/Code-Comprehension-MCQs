{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: None, iftrue: {_nodetype: Return,  expr: None}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: size}, name: {_nodetype: ID,  name: temp}, type: ->}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n\\n\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "======================================================\\n\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "TITLE : "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: title}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: ind}, name: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: word}, name: {_nodetype: ID,  name: temp}, type: ->}, subscript: {_nodetype: ID,  name: i}}, type: .}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}, name: st, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: st, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: st}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: !=, right: {_nodetype: Constant,  type: int, value: 10}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: st}, op: p++}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: st}}]},  name: {_nodetype: ID,  name: printf}}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n\\n\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: StructRef,  field: {_nodetype: ID,  name: suff}, name: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: word}, name: {_nodetype: ID,  name: temp}, type: ->}, subscript: {_nodetype: ID,  name: i}}, type: .}, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ID,  name: k}, name: l, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: l, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: k}}, op: !=, right: {_nodetype: ID,  name: NULL}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: k}}, op: !=, right: {_nodetype: Constant,  type: int, value: 46}}},  stmt: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p--}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: l}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: +, right: {_nodetype: Constant,  type: int, value: 2}}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: j}}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "["}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: len}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: l}, op: +, right: {_nodetype: ID,  name: j}}}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "]"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: l}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: l}, op: +, right: {_nodetype: ID,  name: len}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: l}}, op: !=, right: {_nodetype: ID,  name: NULL}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: l}}, op: !=, right: {_nodetype: Constant,  type: int, value: 46}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: l}}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: l}, op: p++}],   {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: Constant,  type: int, value: 128}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: ed}, name: {_nodetype: ID,  name: temp}, type: ->}, subscript: {_nodetype: ID,  name: i}}, type: .}, {_nodetype: ID,  name: len}]},  name: {_nodetype: ID,  name: DFS}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: DFS, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: Struct,  decls: None, name: dict}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: len, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: len, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: DFS, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}