{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "+"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "-"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "*"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "/"}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: isoper, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}]},  type: {_nodetype: TypeDecl,  declname: isoper, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}