{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: stack, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: stack, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: in, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: in, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: top, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: top, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: top}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ch}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: Switch, cond: {_nodetype: ID,  name: ch},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "("}, stmts: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ch}, {_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "{"}, stmts: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ch}, {_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "["}, stmts: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ch}, {_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: ")"}, stmts: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: top}]},  name: {_nodetype: ID,  name: isempty}}, op: !=, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: in}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: in}, op: ==, right: {_nodetype: Constant,  type: char, value: "("}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Break,   {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "}"}, stmts: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: top}]},  name: {_nodetype: ID,  name: isempty}}, op: !=, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: in}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: in}, op: ==, right: {_nodetype: Constant,  type: char, value: "{"}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Break,   {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "]"}, stmts: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: top}]},  name: {_nodetype: ID,  name: isempty}}, op: !=, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: in}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: stack}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: in}, op: ==, right: {_nodetype: Constant,  type: char, value: "["}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Break,    {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: If, cond: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: top}]},  name: {_nodetype: ID,  name: isempty}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: match, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: s, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: match, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}