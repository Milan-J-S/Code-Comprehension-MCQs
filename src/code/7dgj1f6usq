{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: None,  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: ==, right: {_nodetype: ID,  name: p}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: !=, right: {_nodetype: ID,  name: q}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: c}, subscript: {_nodetype: ID,  name: k}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: ==, right: {_nodetype: ID,  name: q}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: !=, right: {_nodetype: ID,  name: p}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: b}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: c}, subscript: {_nodetype: ID,  name: k}}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: b}, subscript: {_nodetype: ID,  name: j}}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: c}, subscript: {_nodetype: ID,  name: k}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: b}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}],     decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: merge, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: p, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: p, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: q, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: q, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: merge, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}