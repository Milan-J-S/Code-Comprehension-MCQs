{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: firstNumber, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: firstNumber, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: secondNumber, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: secondNumber, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: sumOfTwoNumbers, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sumOfTwoNumbers, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter two integers: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d %d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: firstNumber}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: secondNumber}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sumOfTwoNumbers}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: firstNumber}, op: +, right: {_nodetype: ID,  name: secondNumber}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d + %d = %d"}, {_nodetype: ID,  name: firstNumber}, {_nodetype: ID,  name: secondNumber}, {_nodetype: ID,  name: sumOfTwoNumbers}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}