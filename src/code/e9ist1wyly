{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: string, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 100}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: string, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pointer, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: pointer, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: start, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: start, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a string\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: string}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: string}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: pointer}, op: =, rvalue: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: int, value: 100}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: pointer}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Unable to allocate memory.\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: EXIT_FAILURE}]},  name: {_nodetype: ID,  name: exit}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: start}, op: =, rvalue: {_nodetype: ID,  name: pointer}}, {_nodetype: While, cond: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: temp}, op: *},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ch}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: temp}, op: *}}, {_nodetype: If, cond: {_nodetype: UnaryOp,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ch}]},  name: {_nodetype: ID,  name: check_vowel}}, op: !},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: pointer}, op: *}, op: =, rvalue: {_nodetype: ID,  name: ch}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: pointer}, op: p++}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: temp}, op: p++}],  {_nodetype: Assignment,  lvalue: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: pointer}, op: *}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: pointer}, op: =, rvalue: {_nodetype: ID,  name: start}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: string}, {_nodetype: ID,  name: pointer}]},  name: {_nodetype: ID,  name: strcpy}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: pointer}]},  name: {_nodetype: ID,  name: free}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "String after removing vowel(s): \\"%s\\"\\n"}, {_nodetype: ID,  name: string}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}