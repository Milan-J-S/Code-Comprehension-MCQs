{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: input, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 100}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: input, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: output, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 100}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: output, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: InitList,  exprs: [{_nodetype: Constant,  type: int, value: 0}]}, name: no, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 26}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: no, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: t, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: t, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter some text\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%s"}, {_nodetype: ID,  name: input}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: n}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: input}]},  name: {_nodetype: ID,  name: strlen}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ch}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: input}, subscript: {_nodetype: ID,  name: c}}, op: -, right: {_nodetype: Constant,  type: char, value: "a"}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: no}, subscript: {_nodetype: ID,  name: ch}}, op: p++}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: t}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: <=, right: {_nodetype: Constant,  type: char, value: "z"}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ch}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "a"}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ch}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: x}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: -, right: {_nodetype: Constant,  type: char, value: "a"}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: no}, subscript: {_nodetype: ID,  name: x}}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: output}, subscript: {_nodetype: ID,  name: t}}, op: =, rvalue: {_nodetype: ID,  name: ch}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: t}, op: p++}],   {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: output}, subscript: {_nodetype: ID,  name: t}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%s\\n"}, {_nodetype: ID,  name: output}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}