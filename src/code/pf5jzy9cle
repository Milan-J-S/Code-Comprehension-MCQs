{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: a}, type: ->}, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: b}, type: ->}, name: m, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: d, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: d}, type: ->}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: a}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: d}, type: ->}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: a}, type: ->}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: b}, type: ->}, op: !=, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nNegative exponentiation not supported\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: d}}],  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: e, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: e, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: f, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: f, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: f}, {_nodetype: Constant,  type: string, value: "1"}]},  name: {_nodetype: ID,  name: read}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: f}, type: ->}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: e}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: While, cond: {_nodetype: Constant,  type: int, value: 1},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: e}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: e}, {_nodetype: ID,  name: f}]},  name: {_nodetype: ID,  name: subtract}}}, {_nodetype: If, cond: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: e}]},  name: {_nodetype: ID,  name: checkZero}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Return,  expr: {_nodetype: ID,  name: d}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: d}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: a}]},  name: {_nodetype: ID,  name: multiply}}}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: exponential, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}]},  type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: exponential, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}}, param_decls: None}