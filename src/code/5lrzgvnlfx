{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: length, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: length, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: d, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: start, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: start, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: d}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: length}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: text}]},  name: {_nodetype: ID,  name: strlen}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: start}, op: =, rvalue: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: ID,  name: length}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: start}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: EXIT_FAILURE}]},  name: {_nodetype: ID,  name: exit}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: c}}, op: *}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: c}}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: temp}}, op: *}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: temp}}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: temp}}, op: *}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: temp}}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: temp}, op: p++}],    {_nodetype: Assignment,  lvalue: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: start}, op: +, right: {_nodetype: ID,  name: d}}, op: *}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: text}, op: +, right: {_nodetype: ID,  name: c}}, op: *}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: d}, op: p++}],  {_nodetype: Assignment,  lvalue: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: start}, op: +, right: {_nodetype: ID,  name: d}}, op: *}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: start}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: process, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: text, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: text, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: process, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}}, param_decls: None}