{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: text, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 1000}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: text, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: blank, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 1000}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: blank, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: d, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter some text\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: text}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: c}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: c}}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: temp}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: temp}}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: temp}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: temp}}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: temp}, op: p++}],    {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: blank}, subscript: {_nodetype: ID,  name: d}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: c}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: d}, op: p++}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: blank}, subscript: {_nodetype: ID,  name: d}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Text after removing blanks\\n%s\\n"}, {_nodetype: ID,  name: blank}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}