{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: y, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: y, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: z, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: z, quals: [], type: {_nodetype: IdentifierType,  names: [long, int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter the base  "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%ld"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: x}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter the exponent  "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%ld"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: y}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter the divisor  "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%ld"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: z}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "the modulus is %ld"}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: x}, {_nodetype: ID,  name: y}, {_nodetype: ID,  name: z}]},  name: {_nodetype: ID,  name: modexp}}]},  name: {_nodetype: ID,  name: printf}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}