{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: Constant,  type: int, value: 9}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: Constant,  type: int, value: 9}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: board}, subscript: {_nodetype: ID,  name: j}}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],    {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: isbigfull, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: board, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 9}, dim_quals: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 9}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: board, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}]},  type: {_nodetype: TypeDecl,  declname: isbigfull, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}