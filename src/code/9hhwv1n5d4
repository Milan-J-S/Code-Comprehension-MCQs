{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}, op: <, right: {_nodetype: Constant,  type: int, value: 3}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ct}, op: +=, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}}, {_nodetype: Return,  expr: None}],  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, op: sizeof}, op: *, right: {_nodetype: Constant,  type: int, value: 10}}]},  name: {_nodetype: ID,  name: malloc}}, name: buf, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: buf, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, op: sizeof}, op: *, right: {_nodetype: Constant,  type: int, value: 10}}]},  name: {_nodetype: ID,  name: malloc}}, name: non, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: non, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: buf}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: buf}, {_nodetype: ID,  name: s}, {_nodetype: ID,  name: n}]},  name: {_nodetype: ID,  name: strncpy}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "//%s//"}, {_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: buf}, subscript: {_nodetype: ID,  name: n}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: non}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: non}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: s}, op: +, right: {_nodetype: ID,  name: m}}]},  name: {_nodetype: ID,  name: strcpy}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "|%s|   [%s  %s]  %d\\n"}, {_nodetype: ID,  name: s}, {_nodetype: ID,  name: buf}, {_nodetype: ID,  name: non}, {_nodetype: ID,  name: ct}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: non}, {_nodetype: ID,  name: buf}]},  name: {_nodetype: ID,  name: strstr}}, op: -, right: {_nodetype: ID,  name: non}}, op: >=, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: ID,  name: m}]},  name: {_nodetype: ID,  name: search}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ct}, op: +=, rvalue: {_nodetype: Constant,  type: int, value: 2}}, {_nodetype: While, cond: {_nodetype: Constant,  type: int, value: 1},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: non}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: non}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: non}, op: +, right: {_nodetype: ID,  name: n}}]},  name: {_nodetype: ID,  name: strcpy}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: non}, {_nodetype: ID,  name: buf}]},  name: {_nodetype: ID,  name: strstr}}, op: -, right: {_nodetype: ID,  name: non}}, op: <, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ct}, op: p++}, iftrue: {_nodetype: Break,   {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ct}, op: +=, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: non}]},  name: {_nodetype: ID,  name: strlen}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: s}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: ID,  name: s}, {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}]},  name: {_nodetype: ID,  name: strncpy}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}, {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: strlen}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}]},  name: {_nodetype: ID,  name: search}}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: search, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: s, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: m, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: search, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}