{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: first, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: first, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 1}, name: second, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: second, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: next, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: next, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the number of terms\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "First %d terms of Fibonacci series are:\\n"}, {_nodetype: ID,  name: n}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <=, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: next}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: first}, op: +, right: {_nodetype: ID,  name: second}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: first}, op: =, rvalue: {_nodetype: ID,  name: second}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: second}, op: =, rvalue: {_nodetype: ID,  name: next}}],  iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: next}, op: =, rvalue: {_nodetype: ID,  name: c}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d\\n"}, {_nodetype: ID,  name: next}]},  name: {_nodetype: ID,  name: printf}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}