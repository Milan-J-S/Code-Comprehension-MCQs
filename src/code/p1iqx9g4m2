{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: x}, type: ->}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "X IS INTERNAL\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: display}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: >=, right: {_nodetype: Constant,  type: int, value: 0}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}, type: ->}, op: ==, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: Constant,  type: int, value: 2}, op: *, right: {_nodetype: ID,  name: t}}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: x}, {_nodetype: ID,  name: i}]},  name: {_nodetype: ID,  name: split}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: >, right: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}],   {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "|%d|\\n"}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: x}, type: ->}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}, {_nodetype: ID,  name: k}, {_nodetype: ID,  name: tmp}]},  name: {_nodetype: ID,  name: insertNonFull}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "X IS LEAF\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: >=, right: {_nodetype: Constant,  type: int, value: 0}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ID,  name: k}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ID,  name: tmp}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Key added %d\\n"}, {_nodetype: ID,  name: k}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "|%d|\\n"}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: x}, type: ->}]},  name: {_nodetype: ID,  name: printf}}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: insertNonFull, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: tmp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: tmp, quals: [], type: {_nodetype: Struct,  decls: None, name: body}}}]},  type: {_nodetype: TypeDecl,  declname: insertNonFull, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}