{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: c, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: a}, type: ->}, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: b}, type: ->}, op: >, right: {_nodetype: ID,  name: n}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: n}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: b}, type: ->}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: r, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: r, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: b}, type: ->}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: a}, type: ->}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: b}, type: ->}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: a}, type: ->}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: b}, type: ->}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: a}, type: ->}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: d, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: a}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: e, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: e, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: e}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: e}, {_nodetype: ID,  name: d}]},  name: {_nodetype: ID,  name: subtract}}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: c}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: d, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: a}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: add}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: c}, type: ->}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: c}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: create}}, name: d, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: d, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: d}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: duplicate}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: a}, {_nodetype: ID,  name: d}]},  name: {_nodetype: ID,  name: add}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: c}, type: ->}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: c}}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: a}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: fix}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: a}, {_nodetype: ID,  name: b}]},  name: {_nodetype: ID,  name: checkLesser}}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: b}, {_nodetype: ID,  name: a}]},  name: {_nodetype: ID,  name: subtract}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: sign}, name: {_nodetype: ID,  name: c}, type: ->}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: c}}],  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: bor, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: bor, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: >=, right: {_nodetype: Constant,  type: int, value: 0}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p--}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: a}, type: ->}, subscript: {_nodetype: ID,  name: i}}, op: -, right: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: b}, type: ->}, subscript: {_nodetype: ID,  name: i}}}, op: -, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: bor}, op: /, right: {_nodetype: Constant,  type: int, value: 999}}}, name: t, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: t, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: bor}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: <, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: bor}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 999}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: t}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: Constant,  type: int, value: 10}, op: +, right: {_nodetype: ID,  name: t}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: t}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: r}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ID,  name: t}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: r}, subscript: {_nodetype: Constant,  type: int, value: 0}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: c}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: ID,  name: r}]},  name: {_nodetype: ID,  name: convert}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: c}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: subtract, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}]},  type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: subtract, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}}, param_decls: None}