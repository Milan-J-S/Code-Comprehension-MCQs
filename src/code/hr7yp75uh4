{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a character\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ch}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "a"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "A"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "e"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "E"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "i"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "I"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "o"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "u"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "U"}}},  iffalse: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c isn\t a vowel.\\n"}, {_nodetype: ID,  name: ch}]},  name: {_nodetype: ID,  name: printf}}, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c is a vowel.\\n"}, {_nodetype: ID,  name: ch}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}