{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: octalNumber, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: octalNumber, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: decimalNumber, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: decimalNumber, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: binaryNumber}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: decimalNumber}, op: +=, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: binaryNumber}, op: %, right: {_nodetype: Constant,  type: int, value: 10}}, op: *, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: int, value: 2}, {_nodetype: ID,  name: i}]},  name: {_nodetype: ID,  name: pow}}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: ++}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: binaryNumber}, op: /=, rvalue: {_nodetype: Constant,  type: int, value: 10}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: decimalNumber}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: octalNumber}, op: +=, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: decimalNumber}, op: %, right: {_nodetype: Constant,  type: int, value: 8}}, op: *, right: {_nodetype: ID,  name: i}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: decimalNumber}, op: /=, rvalue: {_nodetype: Constant,  type: int, value: 8}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: *=, rvalue: {_nodetype: Constant,  type: int, value: 10}}],  {_nodetype: Return,  expr: {_nodetype: ID,  name: octalNumber}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: convertBinarytoOctal, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: binaryNumber, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: binaryNumber, quals: [], type: {_nodetype: IdentifierType,  names: [long, long]}}}]},  type: {_nodetype: TypeDecl,  declname: convertBinarytoOctal, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}