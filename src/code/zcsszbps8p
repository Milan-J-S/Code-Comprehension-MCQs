{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: parent, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: parent, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: q, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: q, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: insucc, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: insucc, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: q}, op: =, rvalue: {_nodetype: ID,  name: NULL}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: root}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: parent}, op: =, rvalue: {_nodetype: ID,  name: NULL}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: !=, right: {_nodetype: ID,  name: NULL}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: info}, name: {_nodetype: ID,  name: temp}, type: ->}, op: !=, right: {_nodetype: ID,  name: key}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: parent}, op: =, rvalue: {_nodetype: ID,  name: temp}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: key}, op: <=, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: info}, name: {_nodetype: ID,  name: temp}, type: ->}},  iffalse: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: insucc}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: insucc}, type: ->}, op: !=, right: {_nodetype: ID,  name: NULL}},  stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: insucc}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: insucc}, type: ->}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: insucc}, type: ->}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: q}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}}],  iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: q}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: q}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}}}, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n Unsuccessful Search...Key not found......"}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: parent}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: ==, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: parent}, type: ->}},  iffalse: {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: parent}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: q}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: parent}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: q}}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: root}, op: =, rvalue: {_nodetype: ID,  name: q}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: temp}]},  name: {_nodetype: ID,  name: free}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: count}, op: p--}, {_nodetype: Return,  expr: {_nodetype: ID,  name: root}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: deletenode, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: root, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: root, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: key, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: key, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: deletenode, quals: [], type: {_nodetype: Struct,  decls: None, name: TREE}}}}}, param_decls: None}