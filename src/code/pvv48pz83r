{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: ct, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ct, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: check, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: check, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ct}, op: !=, right: {_nodetype: ID,  name: n}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: check}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: flag, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: flag, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, subscript: {_nodetype: ID,  name: j}}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: flag}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: order}, subscript: {_nodetype: ID,  name: ct}}, op: =, rvalue: {_nodetype: ID,  name: j}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ct}, op: p++}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: check}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}, stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: j}}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}],    {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d  "}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: order}, subscript: {_nodetype: ID,  name: i}}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n"}]},  name: {_nodetype: ID,  name: printf}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: topSort, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: order, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: order, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}]},  type: {_nodetype: TypeDecl,  declname: topSort, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}