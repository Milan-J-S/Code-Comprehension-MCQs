{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: minMultiple, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: minMultiple, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter two positive integers: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d %d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n1}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n2}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: minMultiple}, op: =, rvalue: {_nodetype: TernaryOp, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n1}, op: >, right: {_nodetype: ID,  name: n2}},  iffalse: {_nodetype: ID,  name: n2}, iftrue: {_nodetype: ID,  name: n1}}}, {_nodetype: While, cond: {_nodetype: Constant,  type: int, value: 1},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: minMultiple}, op: %, right: {_nodetype: ID,  name: n1}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: minMultiple}, op: %, right: {_nodetype: ID,  name: n2}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The LCM of %d and %d is %d."}, {_nodetype: ID,  name: n1}, {_nodetype: ID,  name: n2}, {_nodetype: ID,  name: minMultiple}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Break,   {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: minMultiple}, op: ++}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}