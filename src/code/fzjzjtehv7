{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 9}, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 5}, name: b, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: argc}, op: ==, right: {_nodetype: Constant,  type: int, value: 3}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: a}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: argv}, subscript: {_nodetype: Constant,  type: int, value: 1}}]},  name: {_nodetype: ID,  name: atoi}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: b}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: argv}, subscript: {_nodetype: Constant,  type: int, value: 2}}]},  name: {_nodetype: ID,  name: atoi}}}],  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: fork}}, name: pid1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: pid1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pid2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: pid2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pid3, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: pid3, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: pid1}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: p, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: p, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: p}, op: &}]},  name: {_nodetype: ID,  name: wait}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d  \\n\\n"}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: p}]},  name: {_nodetype: ID,  name: WEXITSTATUS}}]},  name: {_nodetype: ID,  name: printf}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: p1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: p1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: pid2}, op: =, rvalue: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: fork}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: pid2}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: p1}, op: &}]},  name: {_nodetype: ID,  name: wait}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: p1}]},  name: {_nodetype: ID,  name: WEXITSTATUS}}]},  name: {_nodetype: ID,  name: exit}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: p2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: p2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: pid3}, op: =, rvalue: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: fork}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: pid3}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: p2}, op: &}]},  name: {_nodetype: ID,  name: wait}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: p2}]},  name: {_nodetype: ID,  name: WEXITSTATUS}}, op: *, right: {_nodetype: Constant,  type: int, value: 2}}]},  name: {_nodetype: ID,  name: exit}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: +, right: {_nodetype: ID,  name: b}}]},  name: {_nodetype: ID,  name: exit}}],      decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: argc, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: argc, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: argv, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: argv, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}}]},  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}