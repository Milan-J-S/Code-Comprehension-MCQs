{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 1000}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: s, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Input a string\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: ch}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: >=, right: {_nodetype: Constant,  type: char, value: "A"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: <=, right: {_nodetype: Constant,  type: char, value: "Z"}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: >=, right: {_nodetype: Constant,  type: char, value: "a"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: <=, right: {_nodetype: Constant,  type: char, value: "z"}}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}, op: -, right: {_nodetype: Constant,  type: int, value: 32}}}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: s}, subscript: {_nodetype: ID,  name: c}}, op: +, right: {_nodetype: Constant,  type: int, value: 32}}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%s\\n"}, {_nodetype: ID,  name: s}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}