{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: x}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Return,  expr: {_nodetype: ID,  name: y}}],  {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: y}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: x}, op: >, right: {_nodetype: ID,  name: y}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: y}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: y}, op: -, right: {_nodetype: ID,  name: x}}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: x}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: x}, op: -, right: {_nodetype: ID,  name: y}}}],   {_nodetype: Return,  expr: {_nodetype: ID,  name: x}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: gcd, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: y, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: y, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}]},  type: {_nodetype: TypeDecl,  declname: gcd, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}}, param_decls: None}