{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: line, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 150}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: line, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: vowels, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: vowels, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: consonants, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: consonants, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: digits, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: digits, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: spaces, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: spaces, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: vowels}, op: =, rvalue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: consonants}, op: =, rvalue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: digits}, op: =, rvalue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: spaces}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a line of string: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%[^\\n]"}, {_nodetype: ID,  name: line}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: ++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "a"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "e"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "i"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "o"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "u"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "A"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "E"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "I"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "U"}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: >=, right: {_nodetype: Constant,  type: char, value: "a"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: Constant,  type: char, value: "z"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: >=, right: {_nodetype: Constant,  type: char, value: "A"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: Constant,  type: char, value: "Z"}}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: >=, right: {_nodetype: Constant,  type: char, value: "0"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: Constant,  type: char, value: "9"}}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: " "}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: spaces}, op: ++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: digits}, op: ++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: consonants}, op: ++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: vowels}, op: ++}],   {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Vowels: %d"}, {_nodetype: ID,  name: vowels}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nConsonants: %d"}, {_nodetype: ID,  name: consonants}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nDigits: %d"}, {_nodetype: ID,  name: digits}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nWhite spaces: %d"}, {_nodetype: ID,  name: spaces}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}