{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: t, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: t, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: t}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t1}, op: <, right: {_nodetype: ID,  name: t}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: t1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: t1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: t1}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: m, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: l, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: l, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d %d %d %d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: m}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: l}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: &}]},  name: {_nodetype: ID,  name: scanf}}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: a}, {_nodetype: ID,  name: n}, {_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, op: sizeof}, {_nodetype: ID,  name: cmp}]},  name: {_nodetype: ID,  name: qsort}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, op: *, right: {_nodetype: ID,  name: l}}, name: min, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: min, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: ID,  name: k}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m}, op: +, right: {_nodetype: ID,  name: i}}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, op: *, right: {_nodetype: ID,  name: l}}, op: -, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: i}}}, name: ttl, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ttl, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ttl}, op: <, right: {_nodetype: ID,  name: min}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: min}, op: =, rvalue: {_nodetype: ID,  name: ttl}}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m}, op: +, right: {_nodetype: ID,  name: i}}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, op: *, right: {_nodetype: ID,  name: l}}, op: -, right: {_nodetype: ID,  name: k}}, name: ttl, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ttl, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ttl}, op: <, right: {_nodetype: ID,  name: min}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: min}, op: =, rvalue: {_nodetype: ID,  name: ttl}}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d\\n"}, {_nodetype: ID,  name: min}]},  name: {_nodetype: ID,  name: printf}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}