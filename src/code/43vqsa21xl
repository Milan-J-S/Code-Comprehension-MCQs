{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: flag, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: flag, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s1, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 1000}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: s1, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s2, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 1000}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: s2, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Input first string\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s1}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Input second string\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s2}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s1}]},  name: {_nodetype: ID,  name: strlen}}, op: <, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s2}]},  name: {_nodetype: ID,  name: strlen}}},  iffalse: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s2}, {_nodetype: ID,  name: s1}]},  name: {_nodetype: ID,  name: check_subsequence}}}, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s1}, {_nodetype: ID,  name: s2}]},  name: {_nodetype: ID,  name: check_subsequence}}}}, {_nodetype: If, cond: {_nodetype: ID,  name: flag},  iffalse: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "NO\\n"}]},  name: {_nodetype: ID,  name: printf}}, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "YES\\n"}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}