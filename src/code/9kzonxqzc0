{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: text, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: text, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: key, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: key, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: en, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: en, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: de, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: de, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ct, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ct, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter the text\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%s"}, {_nodetype: ID,  name: text}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter the key"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%s"}, {_nodetype: ID,  name: key}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: key}]},  name: {_nodetype: ID,  name: strlen}}, name: l, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: l, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\n"}},  init: {_nodetype: ExprList,  exprs: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}]}, next: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}]}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: en}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: i}}, op: ^, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: key}, subscript: {_nodetype: ID,  name: j}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: ==, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: l}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}],  {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\n"}},  init: {_nodetype: ExprList,  exprs: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}]}, next: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}]}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: de}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: en}, subscript: {_nodetype: ID,  name: i}}, op: ^, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: key}, subscript: {_nodetype: ID,  name: j}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: ==, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: l}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n\\nEncrypted: %s\\n"}, {_nodetype: ID,  name: en}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Decrypted: %s\\n"}, {_nodetype: ID,  name: de}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: text}]},  name: {_nodetype: ID,  name: strlen}}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: text}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: de}, subscript: {_nodetype: ID,  name: i}}},  iffalse: None, iftrue: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ct}, op: p++}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ct}, op: ==, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: text}]},  name: {_nodetype: ID,  name: strlen}}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nsuccessful\\n\\n"}]},  name: {_nodetype: ID,  name: printf}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}