{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 6}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ID,  name: j}, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: h, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: h, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: h}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: h}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: h}}, op: >, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: k}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: k}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: h}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: t}, subscript: {_nodetype: ID,  name: h}}, op: =, rvalue: {_nodetype: ID,  name: temp}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: k}, op: =, rvalue: {_nodetype: ID,  name: h}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: h}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: k}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p--}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: heapify, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: heapify, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}