{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Input two integers\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: a}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: b}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <=, right: {_nodetype: ID,  name: b}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: ID,  name: a}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: c}]},  name: {_nodetype: ID,  name: check_armstrong}}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d\\n"}, {_nodetype: ID,  name: c}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}