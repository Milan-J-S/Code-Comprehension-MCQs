{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: sum, quals: [], storage: [static], type: {_nodetype: TypeDecl,  declname: sum, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: ID,  name: sum}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sum}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sum}, op: +, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}}}, {_nodetype: Return,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: a}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n}, op: --}]},  name: {_nodetype: ID,  name: calculate_sum}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: calculate_sum, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: calculate_sum, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}}, param_decls: None}