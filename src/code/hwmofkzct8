{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: r, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: r, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: n}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: r}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: r}, op: *, right: {_nodetype: Constant,  type: int, value: 10}}, op: +, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: n}, subscript: {_nodetype: ID,  name: i}}, op: -, right: {_nodetype: Constant,  type: char, value: "0"}}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: Return,  expr: {_nodetype: ID,  name: r}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: convert, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: convert, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}