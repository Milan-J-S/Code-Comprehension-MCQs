{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: ct1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ct1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: ct2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ct2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: a}, type: ->}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: a}, type: ->}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ID,  name: i}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ct1}, op: p++}]}, stmt: {_nodetype: EmptyStatement,  {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: b}, type: ->}, subscript: {_nodetype: ID,  name: k}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: len}, name: {_nodetype: ID,  name: b}, type: ->}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ID,  name: k}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ct2}, op: p++}]}, stmt: {_nodetype: EmptyStatement,  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ct1}, op: <, right: {_nodetype: ID,  name: ct2}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: a}, type: ->}, subscript: {_nodetype: ID,  name: i}}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: arr}, name: {_nodetype: ID,  name: b}, type: ->}, subscript: {_nodetype: ID,  name: k}}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ct1}, op: ==, right: {_nodetype: ID,  name: ct2}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: checkLesser, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: Struct,  decls: None, name: intal}}}}]},  type: {_nodetype: TypeDecl,  declname: checkLesser, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}