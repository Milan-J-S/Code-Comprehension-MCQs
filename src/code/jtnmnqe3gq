{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: DoWhile, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: !=, right: {_nodetype: Constant,  type: int, value: 4}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter 1-insert, 2-display, 3-reverse, 4-exit"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ch}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Switch, cond: {_nodetype: ID,  name: ch},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 1}, stmts: [{_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: Constant,  type: int, value: 900}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: i}]},  name: {_nodetype: ID,  name: insert}}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 2}, stmts: [{_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: display}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 3}, stmts: [{_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: reverse}}, {_nodetype: Break,      decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}