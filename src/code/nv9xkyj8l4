{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: count, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: count, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: str, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 25}, dim_quals: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 25}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: str, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 25}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "How many strings u are going to enter?: "}]},  name: {_nodetype: ID,  name: puts}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: count}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter Strings one by one: "}]},  name: {_nodetype: ID,  name: puts}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <=, right: {_nodetype: ID,  name: count}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: i}}]},  name: {_nodetype: ID,  name: gets}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <=, right: {_nodetype: ID,  name: count}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <=, right: {_nodetype: ID,  name: count}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: i}}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: j}}]},  name: {_nodetype: ID,  name: strcmp}}, op: >, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: temp}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: i}}]},  name: {_nodetype: ID,  name: strcpy}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: i}}, {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: j}}]},  name: {_nodetype: ID,  name: strcpy}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: j}}, {_nodetype: ID,  name: temp}]},  name: {_nodetype: ID,  name: strcpy}}],   {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Order of Sorted Strings:"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <=, right: {_nodetype: ID,  name: count}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ArrayRef,  name: {_nodetype: ID,  name: str}, subscript: {_nodetype: ID,  name: i}}]},  name: {_nodetype: ID,  name: puts}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}