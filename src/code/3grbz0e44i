{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: Struct,  decls: None, name: complex}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: Struct,  decls: None, name: complex}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: Struct,  decls: None, name: complex}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a and b where a + ib is the first complex number.\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: a}, type: .}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: a}, type: .}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter c and d where c + id is the second complex number.\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: b}, type: .}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: b}, type: .}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: c}, type: .}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: a}, type: .}, op: +, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: b}, type: .}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: c}, type: .}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: a}, type: .}, op: +, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: b}, type: .}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Sum of the complex numbers: (%d) + (%di)\\n"}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: real}, name: {_nodetype: ID,  name: c}, type: .}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: img}, name: {_nodetype: ID,  name: c}, type: .}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}