{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: new, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: new, quals: [], type: {_nodetype: Struct,  decls: None, name: tree}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: new}, op: =, rvalue: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: Struct,  decls: None, name: tree}}}, op: sizeof}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: Struct,  decls: None, name: tree}}}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: data}, name: {_nodetype: ID,  name: new}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: key}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: new}, type: ->}, op: =, rvalue: {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: new}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: NULL}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: flag, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: flag, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: Struct,  decls: None, name: tree}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: root}}, {_nodetype: While, cond: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: flag}, op: !},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: key}, op: <=, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: data}, name: {_nodetype: ID,  name: temp}, type: ->}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}, op: !=, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: new}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}],  iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: right}, name: {_nodetype: ID,  name: temp}, type: ->}}}, iftrue: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}, op: !=, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: new}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: flag}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}],  iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: left}, name: {_nodetype: ID,  name: temp}, type: ->}}}}],   iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: root}, op: =, rvalue: {_nodetype: ID,  name: new}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: insert, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: key, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: key, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: insert, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}