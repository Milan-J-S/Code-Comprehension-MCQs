{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 20}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: s, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: sym, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sym, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: postfix}, op: =, rvalue: {_nodetype: Constant,  type: string, value: ""}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}, name: top, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: top, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: char, value: "#"}, {_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: infix}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sym}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: infix}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: peep}}]},  name: {_nodetype: ID,  name: stackpre}}, op: >, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: sym}]},  name: {_nodetype: ID,  name: inputpre}}},  stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: postfix}, subscript: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: ++}}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: peep}}]},  name: {_nodetype: ID,  name: stackpre}}, op: !=, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: sym}]},  name: {_nodetype: ID,  name: inputpre}}},  iffalse: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: sym}, {_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: peep}}, op: !=, right: {_nodetype: Constant,  type: char, value: "#"}},  stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: postfix}, subscript: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: ++}}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: postfix}, subscript: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: ++}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: convert, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: infix, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: infix, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: postfix, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: postfix, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: convert, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}