{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Return,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: b}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: %, right: {_nodetype: ID,  name: b}}]},  name: {_nodetype: ID,  name: gcd}}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Return,  expr: {_nodetype: ID,  name: a}}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: gcd, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}]},  type: {_nodetype: TypeDecl,  declname: gcd, quals: [], type: {_nodetype: IdentifierType,  names: [long]}}}}, param_decls: None}