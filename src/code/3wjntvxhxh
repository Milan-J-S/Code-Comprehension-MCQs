{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: sumofsq, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sumofsq, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: sqofsum, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sqofsum, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <=, right: {_nodetype: Constant,  type: int, value: 100}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sumofsq}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sumofsq}, op: +, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: *, right: {_nodetype: ID,  name: i}}}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <=, right: {_nodetype: Constant,  type: int, value: 100}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sqofsum}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sqofsum}, op: +, right: {_nodetype: ID,  name: i}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sqofsum}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sqofsum}, op: *, right: {_nodetype: ID,  name: sqofsum}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The difference between sum of the squares and square of the sum of the first 100 natural numbers is %d\\n\\n"}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sqofsum}, op: -, right: {_nodetype: ID,  name: sumofsq}}]},  name: {_nodetype: ID,  name: printf}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}