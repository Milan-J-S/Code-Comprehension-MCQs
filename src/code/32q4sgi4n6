{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: prev, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: prev, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: buffer, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: buffer, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: last, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: last, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: first}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: first}, type: ->}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: first}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: temp}, type: ->}, op: !=, right: {_nodetype: ID,  name: NULL}},  stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: temp}, type: ->}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: last}, op: =, rvalue: {_nodetype: ID,  name: temp}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: buffer}, op: !=, right: {_nodetype: ID,  name: first}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: first}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: temp}, type: ->}, op: !=, right: {_nodetype: ID,  name: NULL}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: !=, right: {_nodetype: ID,  name: buffer}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: prev}, op: =, rvalue: {_nodetype: ID,  name: temp}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: temp}, type: ->}}],  {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: temp}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: prev}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: buffer}, op: =, rvalue: {_nodetype: ID,  name: prev}}],  {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: next}, name: {_nodetype: ID,  name: buffer}, type: ->}, op: =, rvalue: {_nodetype: ID,  name: NULL}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: first}, op: =, rvalue: {_nodetype: ID,  name: last}}],  iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "there is only one element"}]},  name: {_nodetype: ID,  name: printf}}}, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "empty list"}]},  name: {_nodetype: ID,  name: printf}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: reverse, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: reverse, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}