{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "a"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "A"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "e"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "E"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "i"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "I"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "o"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "u"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: char, value: "U"}}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: check_vowel, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}]},  type: {_nodetype: TypeDecl,  declname: check_vowel, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}