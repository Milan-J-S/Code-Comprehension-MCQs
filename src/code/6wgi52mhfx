{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: num, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: num, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: rem, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: rem, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: reverse_num, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: reverse_num, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: start, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: start, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: end, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: end, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the lower limit: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: start}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the upper limit: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: end}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Palindrome numbers between %d and %d are: "}, {_nodetype: ID,  name: start}, {_nodetype: ID,  name: end}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: num}, op: <=, right: {_nodetype: ID,  name: end}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: num}, op: =, rvalue: {_nodetype: ID,  name: start}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: num}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: num}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: reverse_num}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: While, cond: {_nodetype: ID,  name: temp},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: rem}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: %, right: {_nodetype: Constant,  type: int, value: 10}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: /, right: {_nodetype: Constant,  type: int, value: 10}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: reverse_num}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: reverse_num}, op: *, right: {_nodetype: Constant,  type: int, value: 10}}, op: +, right: {_nodetype: ID,  name: rem}}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: num}, op: ==, right: {_nodetype: ID,  name: reverse_num}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d "}, {_nodetype: ID,  name: num}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}