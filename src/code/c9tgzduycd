{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: num, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: num, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pr, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: pr, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: DoWhile, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: !=, right: {_nodetype: Constant,  type: int, value: 4}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "1-INSERT, 2-DISPLAY, 3-DELETE"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: ch}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: ==, right: {_nodetype: Constant,  type: int, value: 3}},  iffalse: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: display}}, iftrue: {_nodetype: FuncCall, args: None,  name: {_nodetype: ID,  name: deleteMax}}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "enter element  "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: num}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: Struct,  decls: None, name: prio}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: data}, name: {_nodetype: ID,  name: temp}, type: .}, op: =, rvalue: {_nodetype: ID,  name: num}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: temp}]},  name: {_nodetype: ID,  name: insert}}],     decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}