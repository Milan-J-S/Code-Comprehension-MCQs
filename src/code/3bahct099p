{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "[%x  %x]\\n\\n"}, {_nodetype: ID,  name: root}, {_nodetype: ID,  name: x}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: node}, op: sizeof}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}}, name: z, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: z, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Cast,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: node}, op: sizeof}]},  name: {_nodetype: ID,  name: malloc}}, to_type: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}}, name: y, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: y, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: y}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: z}, type: ->}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: y}, type: ->}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "|%d %d %d , x->n=%d|\\n"}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: x}, type: ->}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: y}, type: ->}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: z}, type: ->}, {_nodetype: ID,  name: t}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: z}, type: ->}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: z}, type: ->}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: y}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: ID,  name: t}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: z}, type: ->}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: y}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: ID,  name: t}}}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: y}, type: ->}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: t}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: z}, type: ->}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: y}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: ID,  name: t}}}}],   {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: y}, type: ->}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: >=, right: {_nodetype: ID,  name: i}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p--}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: j}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: kids}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ID,  name: z}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: >=, right: {_nodetype: ID,  name: i}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p--}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: j}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: keys}, name: {_nodetype: ID,  name: y}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: x}, type: ->}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: StructRef,  field: {_nodetype: ID,  name: bodies}, name: {_nodetype: ID,  name: y}, type: ->}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: t}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: x}, type: ->}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "|%d %d %d , x->n=%d|\\n"}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: x}, type: ->}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: y}, type: ->}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: isLeaf}, name: {_nodetype: ID,  name: z}, type: ->}, {_nodetype: StructRef,  field: {_nodetype: ID,  name: numKeys}, name: {_nodetype: ID,  name: root}, type: ->}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: display}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: split, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: Struct,  decls: None, name: node}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: split, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}