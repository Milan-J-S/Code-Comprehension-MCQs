{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: line, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 150}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: line, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a string: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: line}]},  name: {_nodetype: ID,  name: gets}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: ++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: UnaryOp,  expr: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: >=, right: {_nodetype: Constant,  type: char, value: "a"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: Constant,  type: char, value: "z"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: >=, right: {_nodetype: Constant,  type: char, value: "A"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: Constant,  type: char, value: "Z"}}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: i}}, op: ==, right: {_nodetype: Constant,  type: char, value: "\\0"}}}, op: !},  stmt: {_nodetype: Compound, block_items: [{_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: j}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: ID,  name: i}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: ++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: line}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: Constant,  type: char, value: "\\0"}}],   {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Output String: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: line}]},  name: {_nodetype: ID,  name: puts}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}