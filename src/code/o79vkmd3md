{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: count, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: count, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}, name: m1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}, name: m2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: count}, op: <=, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: count}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: count}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: ==, right: {_nodetype: ID,  name: n}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: ==, right: {_nodetype: ID,  name: n}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m1}, op: =, rvalue: {_nodetype: ID,  name: m2}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m2}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar1}, subscript: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Break,   iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m1}, op: =, rvalue: {_nodetype: ID,  name: m2}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m2}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar2}, subscript: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Break,   {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar1}, subscript: {_nodetype: ID,  name: i}}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar2}, subscript: {_nodetype: ID,  name: j}}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m1}, op: =, rvalue: {_nodetype: ID,  name: m2}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m2}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar2}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m1}, op: =, rvalue: {_nodetype: ID,  name: m2}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: m2}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: ar1}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],   {_nodetype: Return,  expr: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m1}, op: +, right: {_nodetype: ID,  name: m2}}, op: /, right: {_nodetype: Constant,  type: int, value: 2}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: getMedian, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ar1, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: ar1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: ar2, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: ar2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: getMedian, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}