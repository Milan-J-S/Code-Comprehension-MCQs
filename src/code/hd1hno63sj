{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 1}, name: divisor, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: divisor, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: /, right: {_nodetype: ID,  name: divisor}}, op: >=, right: {_nodetype: Constant,  type: int, value: 10}},  stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: divisor}, op: *=, rvalue: {_nodetype: Constant,  type: int, value: 10}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: /, right: {_nodetype: ID,  name: divisor}}, name: leading, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: leading, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: %, right: {_nodetype: Constant,  type: int, value: 10}}, name: trailing, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: trailing, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: leading}, op: !=, right: {_nodetype: ID,  name: trailing}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: n}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: %, right: {_nodetype: ID,  name: divisor}}, op: /, right: {_nodetype: Constant,  type: int, value: 10}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: divisor}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: divisor}, op: /, right: {_nodetype: Constant,  type: int, value: 100}}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: isPalindrome, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: isPalindrome, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}