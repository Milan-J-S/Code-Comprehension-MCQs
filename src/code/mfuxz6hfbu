{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: InitList,  exprs: [{_nodetype: Constant,  type: int, value: 0}]}, name: first, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 26}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: first, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: InitList,  exprs: [{_nodetype: Constant,  type: int, value: 0}]}, name: second, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 26}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: second, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: c}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: first}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: a}, subscript: {_nodetype: ID,  name: c}}, op: -, right: {_nodetype: Constant,  type: char, value: "a"}}}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: b}, subscript: {_nodetype: ID,  name: c}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: second}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: b}, subscript: {_nodetype: ID,  name: c}}, op: -, right: {_nodetype: Constant,  type: char, value: "a"}}}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}],  {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <, right: {_nodetype: Constant,  type: int, value: 26}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: first}, subscript: {_nodetype: ID,  name: c}}, op: !=, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: second}, subscript: {_nodetype: ID,  name: c}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}],  {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: check_anagram, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: check_anagram, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}