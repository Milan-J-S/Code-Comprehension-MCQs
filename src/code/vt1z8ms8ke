{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: key, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: key, quals: [], type: {_nodetype: Struct,  decls: None, name: heap}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: key}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: *, right: {_nodetype: Constant,  type: int, value: 2}}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <=, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: count}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, op: <=, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: count}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: <, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: ID,  name: i}}},  iffalse: None, iftrue: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: StructRef,  field: {_nodetype: ID,  name: pty}, name: {_nodetype: ID,  name: key}, type: .}, op: >, right: {_nodetype: StructRef,  field: {_nodetype: ID,  name: pty}, name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: ID,  name: i}}, type: .}},  iffalse: {_nodetype: Break,  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: ID,  name: i}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: Constant,  type: int, value: 2}, op: *, right: {_nodetype: ID,  name: j}}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}],   {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: h}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ID,  name: key}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: adjust, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: h, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: h, quals: [], type: {_nodetype: Struct,  decls: None, name: heap}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: count, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: count, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: adjust, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}