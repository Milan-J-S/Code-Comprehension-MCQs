{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: num, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 100}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: num, quals: [], type: {_nodetype: IdentifierType,  names: [float]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: double, value: 0.0}, name: sum, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sum, quals: [], type: {_nodetype: IdentifierType,  names: [float]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: average, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: average, quals: [], type: {_nodetype: IdentifierType,  names: [float]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the numbers of elements: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: >, right: {_nodetype: Constant,  type: int, value: 100}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: <=, right: {_nodetype: Constant,  type: int, value: 0}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Error! number should in range of (1 to 100).\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the number again: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n}, op: &}]},  name: {_nodetype: ID,  name: scanf}}],  {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: ++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d. Enter number: "}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%f"}, {_nodetype: UnaryOp,  expr: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: num}, subscript: {_nodetype: ID,  name: i}}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sum}, op: +=, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: num}, subscript: {_nodetype: ID,  name: i}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: average}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sum}, op: /, right: {_nodetype: ID,  name: n}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Average = %.2f"}, {_nodetype: ID,  name: average}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}