{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n1, quals: [], type: {_nodetype: IdentifierType,  names: [double]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n2, quals: [], type: {_nodetype: IdentifierType,  names: [double]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n3, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n3, quals: [], type: {_nodetype: IdentifierType,  names: [double]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter three different numbers: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%lf %lf %lf"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n1}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n2}, op: &}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: n3}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n1}, op: >=, right: {_nodetype: ID,  name: n2}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n1}, op: >=, right: {_nodetype: ID,  name: n3}}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%.2f is the largest number."}, {_nodetype: ID,  name: n1}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n2}, op: >=, right: {_nodetype: ID,  name: n1}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n2}, op: >=, right: {_nodetype: ID,  name: n3}}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%.2f is the largest number."}, {_nodetype: ID,  name: n2}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n3}, op: >=, right: {_nodetype: ID,  name: n1}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n3}, op: >=, right: {_nodetype: ID,  name: n2}}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%.2f is the largest number."}, {_nodetype: ID,  name: n3}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}