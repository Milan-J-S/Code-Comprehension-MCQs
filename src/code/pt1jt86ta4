{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: c, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: c, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: <=, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: c}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 2}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: c}, op: p++}, stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: %, right: {_nodetype: ID,  name: c}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: c}, op: ==, right: {_nodetype: ID,  name: a}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: check_prime, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: check_prime, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}