{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: sum, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: sum, quals: [], type: {_nodetype: IdentifierType,  names: [long, long]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: temp, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: temp, quals: [], type: {_nodetype: IdentifierType,  names: [long, long]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: remainder, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: remainder, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: digits, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: digits, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: n}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: digits}, op: p++}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: /, right: {_nodetype: Constant,  type: int, value: 10}}}],  {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: ID,  name: n}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: remainder}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: %, right: {_nodetype: Constant,  type: int, value: 10}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: sum}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: sum}, op: +, right: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: remainder}, {_nodetype: ID,  name: digits}]},  name: {_nodetype: ID,  name: power}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: temp}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: temp}, op: /, right: {_nodetype: Constant,  type: int, value: 10}}}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: ==, right: {_nodetype: ID,  name: sum}},  iffalse: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: check_armstrong, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: check_armstrong, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}