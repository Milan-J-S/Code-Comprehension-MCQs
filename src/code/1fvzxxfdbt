{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: visited}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: mat}, subscript: {_nodetype: ID,  name: i}}, subscript: {_nodetype: ID,  name: j}}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: !=, right: {_nodetype: ID,  name: pre}}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: visited}, subscript: {_nodetype: ID,  name: j}}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: None, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: cycle}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: Return,  expr: None}],  {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: visited}, subscript: {_nodetype: ID,  name: j}}, op: +=, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: i}, {_nodetype: ID,  name: j}, {_nodetype: ID,  name: n}, {_nodetype: ID,  name: mat}, {_nodetype: ID,  name: visited}, {_nodetype: ID,  name: cycle}]},  name: {_nodetype: ID,  name: bfsRec}}],  {_nodetype: Return,  expr: None}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: bfsRec, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pre, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: pre, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: mat, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: mat, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: visited, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: visited, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: cycle, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: cycle, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}]},  type: {_nodetype: TypeDecl,  declname: bfsRec, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}