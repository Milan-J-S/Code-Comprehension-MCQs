{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: UnaryOp,  expr: {_nodetype: Typename,  name: None, quals: [], type: {_nodetype: TypeDecl,  declname: None, quals: [], type: {_nodetype: Struct,  decls: None, name: arr}}}, op: sizeof}]},  name: {_nodetype: ID,  name: malloc}}, name: ar, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: ar, quals: [], type: {_nodetype: Struct,  decls: None, name: arr}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: max_size}, name: {_nodetype: ID,  name: ar}, type: ->}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 1}}, {_nodetype: Assignment,  lvalue: {_nodetype: StructRef,  field: {_nodetype: ID,  name: size}, name: {_nodetype: ID,  name: ar}, type: ->}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: While, cond: {_nodetype: Constant,  type: int, value: 1},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: op, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: op, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter 1 for insert, 2 for delete, 3 for disp: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: op}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op}, op: ==, right: {_nodetype: Constant,  type: int, value: 1}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op}, op: ==, right: {_nodetype: Constant,  type: int, value: 2}},  iffalse: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op}, op: ==, right: {_nodetype: Constant,  type: int, value: 3}},  iffalse: {_nodetype: Break,  iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ar}]},  name: {_nodetype: ID,  name: disp}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ar}]},  name: {_nodetype: ID,  name: delete}}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ar}]},  name: {_nodetype: ID,  name: insert}}],     decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}