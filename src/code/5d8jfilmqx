{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: s, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 10}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: s, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: top, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: top, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: r, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: r, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: top}, op: =, rvalue: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 0}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: st}, subscript: {_nodetype: ID,  name: i}}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: st}, subscript: {_nodetype: ID,  name: i}}, name: ch, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: ch, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: If, cond: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: ch}]},  name: {_nodetype: ID,  name: isoper}},  iffalse: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: BinaryOp,  left: {_nodetype: ID,  name: ch}, op: -, right: {_nodetype: Constant,  type: char, value: "0"}}, {_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}, iftrue: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}, name: op1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: op1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}, name: op2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: op2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Switch, cond: {_nodetype: ID,  name: ch},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "+"}, stmts: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: r}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op1}, op: +, right: {_nodetype: ID,  name: op2}}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "-"}, stmts: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: r}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op2}, op: -, right: {_nodetype: ID,  name: op1}}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "*"}, stmts: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: r}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op1}, op: *, right: {_nodetype: ID,  name: op2}}}, {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: char, value: "/"}, stmts: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: r}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: op2}, op: /, right: {_nodetype: ID,  name: op1}}}, {_nodetype: Break,   {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: r}, {_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: push}}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: Return,  expr: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: s}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: top}, op: &}]},  name: {_nodetype: ID,  name: pop}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: pevaluate, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: st, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: st, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: pevaluate, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}