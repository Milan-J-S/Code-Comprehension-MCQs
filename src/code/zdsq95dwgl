{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: first}, op: *}, op: ==, right: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: second}, op: *}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: first}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: "\\0"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: second}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: "\\0"}}},  iffalse: None, iftrue: {_nodetype: Break,  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: first}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: second}, op: p++}],  {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: first}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: "\\0"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: second}, op: *}, op: ==, right: {_nodetype: Constant,  type: char, value: "\\0"}}},  iffalse: {_nodetype: Return,  expr: {_nodetype: UnaryOp,  expr: {_nodetype: Constant,  type: int, value: 1}, op: -}}, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: compare_string, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: first, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: first, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: second, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: second, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}]},  type: {_nodetype: TypeDecl,  declname: compare_string, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}