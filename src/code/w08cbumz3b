{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: arr}, {_nodetype: ID,  name: n}]},  name: {_nodetype: ID,  name: nlognSort}}, op: ==, right: {_nodetype: Constant,  type: int, value: 0}},  iffalse: None, iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Succesfully Sorted\\n"}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: Constant,  type: int, value: 1}}, op: -, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: Constant,  type: int, value: 0}}}, name: diff, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: diff, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: n}, op: -, right: {_nodetype: Constant,  type: int, value: 1}}},  init: {_nodetype: DeclList,  decls: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 1}, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: -, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: i}}}, op: <, right: {_nodetype: ID,  name: diff}},  iffalse: None, iftrue: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: diff}, op: =, rvalue: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}}, op: -, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: i}}}}}}, {_nodetype: Return,  expr: {_nodetype: ID,  name: diff}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: lowest_diff, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: arr, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: arr, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: n, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: lowest_diff, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}