{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: i, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: i, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: j, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: j, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: k, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: k, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m}, op: -, right: {_nodetype: ID,  name: l}}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, name: n1, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n1, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: r}, op: -, right: {_nodetype: ID,  name: m}}, name: n2, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: n2, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: L, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n1}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: L, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: R, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: ID,  name: n2}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: R, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n1}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: L}, subscript: {_nodetype: ID,  name: i}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: l}, op: +, right: {_nodetype: ID,  name: i}}}}}, {_nodetype: For, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n2}},  init: {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, next: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, stmt: {_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: R}, subscript: {_nodetype: ID,  name: j}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: m}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}, op: +, right: {_nodetype: ID,  name: j}}}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: i}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: j}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: k}, op: =, rvalue: {_nodetype: ID,  name: l}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n1}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n2}}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: L}, subscript: {_nodetype: ID,  name: i}}, op: <=, right: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: R}, subscript: {_nodetype: ID,  name: j}}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: R}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}],  iftrue: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: L}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}],  {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}],  {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: i}, op: <, right: {_nodetype: ID,  name: n1}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: L}, subscript: {_nodetype: ID,  name: i}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: i}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}],  {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: j}, op: <, right: {_nodetype: ID,  name: n2}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: arr}, subscript: {_nodetype: ID,  name: k}}, op: =, rvalue: {_nodetype: ArrayRef,  name: {_nodetype: ID,  name: R}, subscript: {_nodetype: ID,  name: j}}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: j}, op: p++}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: k}, op: p++}],    decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: merge, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: arr, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: None, dim_quals: [], type: {_nodetype: TypeDecl,  declname: arr, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: l, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: l, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: m, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: m, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: r, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: r, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}]},  type: {_nodetype: TypeDecl,  declname: merge, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}