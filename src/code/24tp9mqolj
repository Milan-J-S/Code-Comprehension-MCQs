{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "R"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "R"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "V"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "B"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "B"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "G"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "V"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "Y"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "Y"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "G"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "O"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "R"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "Y"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "V"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "V"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "B"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "R"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: a}, op: ==, right: {_nodetype: Constant,  type: char, value: "G"}}, op: &&, right: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "G"}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "B"}}}, op: ||, right: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: b}, op: ==, right: {_nodetype: Constant,  type: char, value: "Y"}}}},  iffalse: None, iftrue: {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 1}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: clash, quals: [], storage: [], type: {_nodetype: FuncDecl, args: {_nodetype: ParamList,  params: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: a, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: a, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: b, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: b, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}]},  type: {_nodetype: TypeDecl,  declname: clash, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}