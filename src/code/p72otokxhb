{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: str, quals: [], storage: [], type: {_nodetype: ArrayDecl,  dim: {_nodetype: Constant,  type: int, value: 100}, dim_quals: [], type: {_nodetype: TypeDecl,  declname: str, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: p, quals: [], storage: [], type: {_nodetype: PtrDecl,  quals: [], type: {_nodetype: TypeDecl,  declname: p, quals: [], type: {_nodetype: IdentifierType,  names: [char]}}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter any string: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: str}, {_nodetype: Constant,  type: int, value: 100}, {_nodetype: ID,  name: stdin}]},  name: {_nodetype: ID,  name: fgets}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: p}, op: =, rvalue: {_nodetype: ID,  name: str}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The input string is: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: p}, op: *}, op: !=, right: {_nodetype: Constant,  type: char, value: "\\0"}},  stmt: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%c"}, {_nodetype: UnaryOp,  expr: {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: p}, op: p++}, op: *}]},  name: {_nodetype: ID,  name: printf}}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}