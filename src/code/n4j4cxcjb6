{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: base, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: base, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: exponent, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: exponent, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: {_nodetype: Constant,  type: int, value: 1}, name: result, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: result, quals: [], type: {_nodetype: IdentifierType,  names: [long, long]}}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter a base number: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: base}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter an exponent: "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: exponent}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: While, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: exponent}, op: !=, right: {_nodetype: Constant,  type: int, value: 0}},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: result}, op: *=, rvalue: {_nodetype: ID,  name: base}}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: exponent}, op: --}],  {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Answer = %lld"}, {_nodetype: ID,  name: result}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: Return,  expr: {_nodetype: Constant,  type: int, value: 0}}],   decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}}, param_decls: None}