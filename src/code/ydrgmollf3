{_nodetype: FuncDef, body: {_nodetype: Compound, block_items: [{_nodetype: BinaryOp,  left: {_nodetype: ID,  name: TREE}, op: *, right: {_nodetype: ID,  name: root}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: choice, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: choice, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: x, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: x, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: key, quals: [], storage: [], type: {_nodetype: TypeDecl,  declname: key, quals: [], type: {_nodetype: IdentifierType,  names: [int]}}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: count}, op: =, rvalue: {_nodetype: Constant,  type: int, value: 0}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: root}, op: =, rvalue: {_nodetype: ID,  name: NULL}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\nEnter your choice\\n\\t 1 -> Lexical Insertion\\n\\t 2->Preorder Tree Traversal\\n\\t3->Inorder Tree Traversal\\n\\t "}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "\\n\\t 4 -> Postorder Tree Traversal\\n\\t 5-> Deletion \\n\\t6->find Maximum element\\n\\t 7->Number of Nodes\\n\\t8->Exit"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: While, cond: {_nodetype: Constant,  type: int, value: 1},  stmt: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: choice}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Switch, cond: {_nodetype: ID,  name: choice},  stmt: {_nodetype: Compound, block_items: [{_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 1}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the element"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: x}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: root}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}, {_nodetype: ID,  name: x}]},  name: {_nodetype: ID,  name: lexins}}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 2}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The Preorder Tree Traversal of the TREE is ....\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: preorder}}],  iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Empty Tree"}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 3}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The Inorder Tree Traversal of the TREE is ....\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: inorder}}],  iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Empty Tree"}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 4}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The Postorder Tree Traversal of the TREE is ....\\n"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: postorder}}],  iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Empty Tree"}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 5}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: If, cond: {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: root}, op: ==, right: {_nodetype: ID,  name: NULL}},  iffalse: {_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Enter the element to be deleted from the Tree ..."}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: UnaryOp,  expr: {_nodetype: ID,  name: key}, op: &}]},  name: {_nodetype: ID,  name: scanf}}, {_nodetype: Assignment,  lvalue: {_nodetype: ID,  name: root}, op: =, rvalue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}, {_nodetype: ID,  name: key}]},  name: {_nodetype: ID,  name: deletenode}}}],  iftrue: {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Empty Tree...deletion cannot be performed on an empty tree..."}]},  name: {_nodetype: ID,  name: printf}}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 6}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The maximum element in the tree is..%d"}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: findmax}}]},  name: {_nodetype: ID,  name: printf}}],  {_nodetype: Break,  {_nodetype: Case,  expr: {_nodetype: Constant,  type: int, value: 7}, stmts: [{_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "%d"}, {_nodetype: ID,  name: count}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: ID,  name: root}]},  name: {_nodetype: ID,  name: noofnodes}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "The number of nodes in the tree are..%d"}, {_nodetype: BinaryOp,  left: {_nodetype: ID,  name: count}, op: +, right: {_nodetype: Constant,  type: int, value: 1}}]},  name: {_nodetype: ID,  name: printf}}],  {_nodetype: Break,  {_nodetype: Default,  stmts: [{_nodetype: Compound, block_items: [{_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: string, value: "Invalid choice \\t"}]},  name: {_nodetype: ID,  name: printf}}, {_nodetype: FuncCall, args: {_nodetype: ExprList,  exprs: [{_nodetype: Constant,  type: int, value: 1}]},  name: {_nodetype: ID,  name: exit}}],  {_nodetype: Break,      decl: {_nodetype: Decl, bitsize: None,  funcspec: [], init: None, name: main, quals: [], storage: [], type: {_nodetype: FuncDecl, args: None,  type: {_nodetype: TypeDecl,  declname: main, quals: [], type: {_nodetype: IdentifierType,  names: [void]}}}}, param_decls: None}