#include<stdio.h>
#include<stdlib.h>

int merge();
int mergeSort();

int main()
{
int t;
scanf("%d",&t);
for(int l=0;l<t;l++)
{
long int n,k;
scanf("%ld %ld",&n,&k);
if(n==k)
    printf("Case #%d: 0 0\n",l+1);
else
{
static long int occ[10000000];
occ[0]=n+1;
occ[1]=0;
for(int i=2;i<10000000;i++)
    occ[i]=-1;
long int s1,s2,x=0;
for(long int y=0;y<k;y++)
{
    long int min=occ[0]-occ[1];
        s1=occ[1];
        s2=occ[0];
    for(long int j=1;j<k+1;j++)
    {
        
        if(occ[j]-occ[j+1] >= min && occ[j+1]!=-1 )
            {min = occ[j] - occ[j+1];
            s2=occ[j];
            s1=occ[j+1];
            }
        
    }
    x=(s2+s1)/2;
    occ[2+y]=x;
    mergeSort(occ,k+2);
}

if(x-s1 > s2-x)
printf("Case #%d: %ld %ld\n",l+1,x-s1-1,s2-x-1);

else

printf("Case #%d: %ld %ld\n",l+1,s2-x-1,x-s1-1);



}
}
    return 0;
}


int merge(long int *a,long int *b, long int *c, int p,int q)
{
int i=0,j=0,k=0;

for(int i=0;;i++)
{
	if(j==p)
	{
		while(k!=q)
		{
			a[i] = c[k];
			i++;
			k++;
		}
	return 0;	
	}
	
	if(k==q)
	{
		while(j!=p)
		{
			a[i] = b[j];
			i++;
			j++;
		}
	return 0;	
	}

	if(c[k]<b[j])
	{
		a[i] = b[j];
		j++;
	}
	
	else
	{
		a[i] = c[k];
		k++;
	}



}

}

int mergeSort(long int *a,long n)
{
long int *b,*c;
//a = (int *) malloc(sizeof(int)*n);
b=(long int*) malloc(sizeof(long int) * n/2 +1);
c=(long int*) malloc(sizeof(long int) * n/2 +1); 

//for(int i=0;i<n;i++)
	//printf("%d  ",a[i]);

int j=0;

if(n>1)
{
int i=0;


for(i=0;i<n/2;i++)
{
b[i]=a[i];
}



j=0;
for(j=0,i=n/2;i<n;j++,i++)
{
c[j]=a[i];

}




mergeSort(b,n/2);
mergeSort(c,j);
}

merge(a,b,c,n/2,j);

free(b);
free(c);
return 0;
}
