void foo(int *xp, int *yp) { 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
}



['swap two numbers', 'swap value numbers', 'swap two numbers using pointers', 'scan 2 numbers, swap using bitwise operators print', 'swap two items', 'swap elements list side sort']
------------------------------------------



void foo(int arr[], int n) { 
   int i, j; 
   for (i = 0; i < n-1; i++)       
  
       // Last i elements are already in place    
       for (j = 0; j < n-i-1; j++)  
           if (arr[j] > arr[j+1]) 
              swap(&arr[j], &arr[j+1]); 
}



['A function implement bubble sort', 'bubble sort repeatedly swapping adjacent elements wrong order.', 'check brackets match', 'cyclically rotate array clockwise one', 'function print postfix expression tree', 'function print infix expression tree']
------------------------------------------



void foo(int arr[], int size) { 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("n"); 
}



['Function print array', 'print items array', 'scan array, apply function print', 'recursive function element', 'function print postfix expression tree', 'function select operation']
------------------------------------------



void foo(char* arr[], int n) { 
    for (int i = 0; i < n; i++) { 
        printf("%s ", arr[i]); 
    } 
}



['print element elements string', 'print string', 'print element structure', 'print elements', 'print elements list', 'print elements list inorder']
------------------------------------------



void foo(char* arr[], int n) { 
    char* temp; 
  
    // Move from begin and end. Keep 
    // swapping strings.  
    int j = n - 1; 
    for (int i = 0; i < j; i++) { 
        temp = arr[i]; 
        arr[i] = arr[j]; 
        arr[j] = temp; 
        j--; 
    } 
}



['reverse elements string', 'reverse string', 'reverse string using pointers', 'sort string elements', 'reverse elements array', 'reverse string using recursion']
------------------------------------------



char* foo(node** p, char* a) { 
  
    // If its the end of the expression 
    if (*a == '\0') 
        return '\0'; 
  
    while (1) { 
        char* q = "null"; 
        if (*p == NULL) { 
  
            // Create a node with *a as the data and 
            // both the children set to null 
            node* nn = (node*)malloc(sizeof(node)); 
            nn->data = *a; 
            nn->left = NULL; 
            nn->right = NULL; 
            *p = nn; 
        } 
        else { 
  
            // If the character is an operand 
            if (*a >= 'a' && *a <= 'z') { 
                return a; 
            } 
  
            // Build the left sub-tree 
            q = foo(&(*p)->left, a + 1); 
  
            // Build the right sub-tree 
            q = foo(&(*p)->right, q + 1); 
  
            return q; 
        } 
    } 
}



['Build right sub-tree', 'perform selection sort', 'evaluate postfix expression', 'store information using structures dynamically memory allocation', 'execute function shell', 'recursive traversal graph']
------------------------------------------



void foo(node* p) { 
    if (p == NULL) { 
        return; 
    } 
    else { 
        foo(p->left); 
        printf("%c ", p->data); 
        foo(p->right); 
    } 
}



['Function print infix expression tree', 'function print postfix expression tree', 'find lowest common multiple 2 numbers', 'print numbers 1 n triangle', 'function implement bubble sort', 'find max element stored tree']
------------------------------------------



void foo(node* p) { 
    if (p == NULL) { 
        return; 
    } 
    else { 
        foo(p->left); 
        foo(p->right); 
        printf("%c ", p->data); 
    } 
}



['Function print postfix expression tree', 'print star characters diamond format', 'evaluate postfix expression', 'function print infix expression tree', 'find number occurrences substring string', 'every iteration selection sort, minimum element (considering ascending order) unsorted subarray picked moved sorted subarray']
------------------------------------------



int foo()
{
	int a[30],n,i;
	printf("Enter no of elements:");
	scanf("%d",&n);
	printf("Enter array elements:");
	
	for(i=0;i<n;i++)
		scanf("%d",&a[i]);
		
	mergesort(a,0,n-1);
	
	printf("\nSorted array is :");
	for(i=0;i<n;i++)
		printf("%d ",a[i]);
		
	return 0;
}



['perform merge sort subarrays', 'perform arithmetic operations two numbers', 'merge contents two files', 'perform radix sort', 'perform depth first search suffix tree', 'merge 2 lists order']
------------------------------------------



void foo(int a[],int i,int j)
{
	int mid;
		
	if(i<j)
	{
		mid=(i+j)/2;
		foo(a,i,mid);		//left recursion
		foo(a,mid+1,j);	//right recursion
		merge(a,i,mid,mid+1,j);	//merging of two sorted sub-arrays
	}
}



['merge sorted subarrays sorted array', "function returns k'th smallest element arr[l..r] using quicksort based method. k smaller number elements array. partition array around random element get position pivot element sorted array", 'search element sorted list splitting repeatedly', 'merge contents two files', 'get substrings particular length string', 'merge 2 lists order']
------------------------------------------



void foo()
{
	int i;
	for(i=0;i<SIZE;i++)
	{
		t[i]=0;
	}
}



['print elements list', 'print elements linked list', 'print elements call list', 'print elements', 'print elements circular list', 'print elements elements list preorder']
------------------------------------------



void foo(int key)
{
	int i=0;
	while(t[i]!=0 && i<SIZE)
	{
		if(key<t[i])
			i=2*i+1;
		else
			i=2*i+2;
	}
	if(i<SIZE)
	t[i]=key;
	else
	printf("\nArray idex out of bounds\n");
}



['insert elements list', 'print elements list', 'display elements list', 'insert linked list', 'reverse elements linked list', 'insert element end list']
------------------------------------------



void foo(int i)
{
	if(t[i]!=0)
	{
		foo(2*i+1);
		printf("%d\t",t[i]);
		foo(2*i+2);
	}
}



['print elements list inorder', 'print elements list postorder', 'print elements elements list preorder', 'print elements tree inorder', 'increment print elements list', 'print elements double linked list']
------------------------------------------



void foo(int i)
{
	if(t[i]!=0)
	{
		
		printf("%d\t",t[i]);
		foo(2*i+1);
		foo(2*i+2);
	}
}



['print elements elements list preorder', 'print elements tree preorder', 'print elements list inorder', 'print elements list postorder', 'print numbers 1 n triangle', 'print numbers using loop']
------------------------------------------



void foo(int i)
{
	if(t[i]!=0)
	{
		foo(2*i+1);
		foo(2*i+2);
		printf("%d\t",t[i]);
	}
}



['print elements list postorder', 'print elements elements list preorder', 'print elements list inorder', 'print elements tree postorder', 'print numbers pyramid format', 'increment print elements list']
------------------------------------------



# Python3 code to Check for 
# balanced parentheses in an expression 
open_list = ["[","{","("] 
close_list = ["]","}",")"] 

# Function to check parentheses 
def check(myStr): 
	stack = [] 
	for i in myStr: 
		if i in open_list: 
			stack.append(i) 
		elif i in close_list: 
			pos = close_list.index(i) 
			if ((len(stack) > 0) and
				(open_list[pos] == stack[len(stack)-1])): 
				stack.pop() 
			else: 
				return "Unbalanced"
	if len(stack) == 0: 
		return "Balanced"

# Driver code 
string = "{[]{()}}"
print(string,"-", check(string)) 

string = "[{}{})(]"
print(string,"-", check(string)) 




['checks parethesis string balanced', 'using else control instructions', 'store information structure', 'find number occurrences substring string', 'print number occurrences substring string', 'get substrings particular length string']
------------------------------------------



char foo(char *str) { 
	// count number of occurrences of every character. 
	int count[NO_OF_CHARS] = {0}, i; 
	for (i=0; str[i]; i++) 
		(count[str[i]])++; 

	// Traverse through the count[] and find second highest element. 
	int first = 0, second = 0; 
	for (i = 0; i < NO_OF_CHARS; i++) 
	{ 
		/* If current element is smaller than first then update both 
		first and second */
		if (count[i] > count[first]) 
		{ 
			second = first; 
			first = i; 
		} 

		/* If count[i] is in between first and second then update second */
		else if (count[i] > count[second] && 
				count[i] != count[first]) 
			second = i; 
	} 

	return second; 
}



['find second frequent character', 'store information using structures dynamically memory allocation', 'find transpose matrix', 'second largest element list', 'find lowest common multiple 2 numbers', 'display armstrong number interval']
------------------------------------------



// Java program to show how to compare Strings 
// using library function 
public class Test 
{ 
	public static void main(String[] args) 
	{ 
		String s1 = "Ram"; 
		String s2 = "Ram"; 
		String s3 = "Shyam"; 
		String s4 = "ABC"; 

		System.out.println(" Comparing strings with compareto:"); 
		System.out.println(s1.compareTo(s2)); 
		System.out.println(s1.compareTo(s3)); 
		System.out.println(s1.compareTo(s4)); 
	} 
} 




['Compare two strings using Java library function', 'compare values 2 strings', 'find greatest common divisor 2 numbers', 'main program call function', 'function print postfix expression tree', 'check leap year using divisibility']
------------------------------------------



# Python code to reverse a string 
# using loop 

def reverse(s): 
str = "" 
for i in s: 
	str = i + str
return str

s = "Geeksforgeeks"

print ("The original string is : ",end="") 
print (s) 

print ("The new string(using loops) is : ",end="") 
print (reverse(s)) 




['reverse string', 'reverse string using pointers', 'reverse elements string', 'reverse string using recursion', 'scan string check equal reverse', 'check string equal reverse using pointers']
------------------------------------------



void foo()
{
	printf("hello world");
}



['print string', 'scan print string', 'scan string, convert lowercase print', 'reverse string', 'print string using pointer', 'print string element 2d array']
------------------------------------------



 void foo(int key)
{
struct tree *new;
new=(struct tree *)malloc(sizeof(struct tree));
new->data=key;
new->left=new->right=NULL;

if (root==NULL)
	root=new;
	
else{
int flag=0;
struct tree *temp;
temp=root;
while(!flag)
{if(key<=temp->data)
	if(temp->left!=NULL)
		temp=temp->left;
	else
		 {temp->left=new;
		 flag=1;
		 }
		 
else
	if(temp->right!=NULL)
		temp=temp->right;
	else{
		temp->right=new;
		flag=1;
	}
}
}
}



['insert element binary list', 'insert element circular list', 'insert element start list', 'insert element linked list', 'insert element list order', 'insert element end list']
------------------------------------------



void foo(struct tree *root)
{
if(root!=NULL)
{
printf("%d  ",root->data);
foo(root->left);
foo(root->right);
}
}



['print tree preorder', 'print elements tree preorder', 'print number times key exists array', 'search key binary tree', 'print elements tree postorder', 'compute value polynomial']
------------------------------------------



void foo(int *xp, int *yp) { 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
}



['pop stack', 'function implement bubble sort', 'insert non full node b tree', 'function returns median ar1[] ar2[].', 'merge sorted subarrays sorted array', 'generate multiplication table']
------------------------------------------



void foo(int arr[], int n) { 
   int i, j; 
   for (i = 0; i < n-1; i++)       
  
       // Last i elements are already in place    
       for (j = 0; j < n-i-1; j++)  
           if (arr[j] > arr[j+1]) 
              swap(&arr[j], &arr[j+1]); 
}



['iteration repeatedly swapping adjacent adjacent adjacent', 'bubble sort comparing adjacent elements', 'find lowest difference consecutive numbers list', 'find transpose matrix', 'insertion sort moves items greater key forward', 'create, initialize access pointer variable']
------------------------------------------



void foo(int arr[], int size) { 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("n"); 
}



['print elements', 'print elements queue', 'print elements list', 'print elements array', 'print elements linked list', 'print elements heap']
------------------------------------------



int foo() { 
    int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    bubbleSort(arr, n); 
    printf("Sorted array: \n"); 
    printArray(arr, n); 
    return 0; 
}



['print elements call list', 'print elements list', 'scan list, call function print elements', 'print elements linked list', 'print elements', 'print elements double linked list']
------------------------------------------



